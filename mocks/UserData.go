// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	user "mia/my_task_app/features/user"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserDataInterface type
type UserData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userId
func (_m *UserData) Delete(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: inputUser
func (_m *UserData) Insert(inputUser user.CoreUser) (uint, error) {
	ret := _m.Called(inputUser)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(user.CoreUser) (uint, error)); ok {
		return rf(inputUser)
	}
	if rf, ok := ret.Get(0).(func(user.CoreUser) uint); ok {
		r0 = rf(inputUser)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(user.CoreUser) error); ok {
		r1 = rf(inputUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *UserData) Login(email string) (user.CoreUser, error) {
	ret := _m.Called(email)

	var r0 user.CoreUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.CoreUser, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) user.CoreUser); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(user.CoreUser)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: userId
func (_m *UserData) Select(userId uint) (user.CoreUser, error) {
	ret := _m.Called(userId)

	var r0 user.CoreUser
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (user.CoreUser, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) user.CoreUser); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(user.CoreUser)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *UserData) SelectAll() ([]user.CoreUser, error) {
	ret := _m.Called()

	var r0 []user.CoreUser
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]user.CoreUser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []user.CoreUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.CoreUser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, userData
func (_m *UserData) Update(userId uint, userData user.CoreUser) error {
	ret := _m.Called(userId, userData)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, user.CoreUser) error); ok {
		r0 = rf(userId, userData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserData(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
